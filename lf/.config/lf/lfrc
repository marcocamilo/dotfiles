#  ────────────────────────────────────────────────────────────────────
#                             BASIC SETTINGS
#  ────────────────────────────────────────────────────────────────────
set hidden true
set ignorecase true
set icons true
set sortby natural
set ratios 1:2:4

#  ────────────────────────────────────────────────────────────────────
#                           PERSISTENT OPTION
#  ────────────────────────────────────────────────────────────────────
#  ────────────────────────────────────────────────────────────────────
#   sorting                                                            
#  ────────────────────────────────────────────────────────────────────

#  ────────────────────────────────────────────────────────────────────
#                              FILE PREVIEW
#  ────────────────────────────────────────────────────────────────────
#  ────────────────────────────────────────────────────────────────────
#   bat
#  ────────────────────────────────────────────────────────────────────
set previewer ~/.config/lf/bat.sh
map b $~/.config/lf/bat.sh "$f" | less -RX

#  ────────────────────────────────────────────────────────────────────
#                            CUSTOM FUNCTIONS
#  ────────────────────────────────────────────────────────────────────
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File name: "
  read ans
  touch "$ans"
  lf -remote "send $7 reload"  # Reload lf to reflect the new file
}}

cmd setwallpaper ${{
    cp "$f" ~/.config/wall.jpg
    xwallpaper --zoom "$f"
    betterlockscreen -u "$f" --fx
}}

cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

cmd copypath ${{
    file_path=$(realpath "$f")
    echo $file_path | pbcopy
  }}

#  ────────────────────────────────────────────────────────────────────
#                                BINDINGS
#  ────────────────────────────────────────────────────────────────────
#  ────────────────────────────────────────────────────────────────────
#   Remove some defaults                                               
#  ────────────────────────────────────────────────────────────────────
map m
map o
map n
map "'"
map '"'
map d
map a
map q

map c $vscodium "$f"

map au unarchive
map ae $wine "$f"

#  ────────────────────────────────────────────────────────────────────
#   Basc Functions                                                     
#  ────────────────────────────────────────────────────────────────────
map . set hidden!
map dd delete
map dr restore_trash
map p paste
map x cut
map y copy
map <enter> open
map R reload
map a mkfile
map md mkdir
map C clear
map r rename
map q quit

#  ────────────────────────────────────────────────────────────────────
#   Movements                                                           
#  ────────────────────────────────────────────────────────────────────
map gh cd ~

map gc. cd ~/.config/
map gcd cd ~/dotfiles/
map gclf cd ~/.config/lf/
map gcls cd ~/.config/lsd/
map gcn cd ~/.config/nvim/
map gcs cd ~/.config/starship/
map gct cd ~/.config/tmux/
map gcz cd ~/.config/zsh/

map gn. cd ~/ml/
map gnr cd ~/ml/reference-notebooks/
map gno cd ~/ml/optimization-tutorial/

map gus. cd ~/ml/USR\ -\ User\ Needs\ Prediction/
map gusn cd ~/ml/USR\ -\ User\ Needs\ Prediction/notebooks/
map gusd cd ~/ml/USR\ -\ User\ Needs\ Prediction/data/

map gtc. cd ~/ml/TCM\ -\ Topic\ Clustering\ Model/
map gtcn cd ~/ml/TCM\ -\ Topic\ Clustering\ Model/notebooks/
map gtcd cd ~/ml/TCM\ -\ Topic\ Clustering\ Model/data/

map gen. cd ~/ml/TENT\ -\ Topic\ Entity\ Recognition/

map gv. cd ~/ml/VEC\ -\ Vectorization\ Model/
map gvm cd ~/ml/VEC\ -\ Vectorization\ Model/vector-model
map gvd cd ~/ml/VEC\ -\ Vectorization\ Model/dev

map g. cd /usr/
map gl cd /usr/local/
map gb cd /usr/local/bin/
